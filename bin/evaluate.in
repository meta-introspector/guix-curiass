#!/bin/sh
# -*- scheme -*-
# @configure_input@
exec ${GUILE:-@GUILE@} --no-auto-compile -e main -s "$0" "$@"
!#
;;;; evaluate -- convert a specification to a job list
;;; Copyright © 2016, 2018 Ludovic Courtès <ludo@gnu.org>
;;; Copyright © 2016, 2017 Mathieu Lirzin <mthl@gnu.org>
;;; Copyright © 2017, 2018, 2021 Mathieu Othacehe <m.othacehe@gmail.com>
;;; Copyright © 2018 Clément Lassieur <clement@lassieur.org>
;;;
;;; This file is part of Cuirass.
;;;
;;; Cuirass is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; Cuirass is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Cuirass.  If not, see <http://www.gnu.org/licenses/>.


(use-modules (cuirass database)
             (cuirass specification)
             (guix channels)
             (guix inferior)
             (guix licenses)
             (guix store)
             (guix utils)
             (ice-9 match)
             (ice-9 pretty-print)
             (ice-9 threads))

(define (checkouts->channel-instances checkouts)
  "Return the list of CHANNEL-INSTANCE records describing the given
CHECKOUTS."
  (map (lambda (checkout)
         (let ((channel (assq-ref checkout #:channel))
               (directory (assq-ref checkout #:directory))
               (commit (assq-ref checkout #:commit)))
           (checkout->channel-instance directory
                                       #:name channel
                                       #:commit commit)))
       checkouts))

(define* (inferior-evaluation store instances
                              #:key
                              eval-id spec build systems)
  "Spawn an inferior on INSTANCES that uses the given STORE.  Withing that
inferior, call PROC with PROC-ARGS arguments from MODULE.  Pass PROC a
register procedure that writes its arguments on a socket.  Listen that socket
for new jobs and register them using REGISTER-JOB procedure."
  ;; The module where the below procedure is defined.
  (define eval-module '(gnu ci))

  ;; The Guix procedure for job evaluation.
  (define eval-proc 'cuirass-jobs)

  (let* ((cached (cached-channel-instance store instances))
         (inferior (open-inferior cached))
         (channels (map channel-instance->sexp instances))
         (args `((channels . ,channels)
                 (systems . ,systems)
                 (subset . ,build))))
    (inferior-eval `(use-modules ,eval-module) inferior)
    (let ((jobs
           (inferior-eval-with-store
            inferior store
            `(lambda (store)
               (,eval-proc store ',args)))))
      (db-register-builds jobs eval-id spec))))

(define* (main #:optional (args (command-line)))
  "This procedure spawns an inferior on the given channels.  An evaluation
procedure is called within that inferior.  The evaluation procedure is passed
a job registration callback.  The registered jobs are then read on a socket
nd registered in database."
  (match args
    ((command database eval-str)
     (parameterize ((%package-database database))
       (with-database
           (let* ((eval-id (with-input-from-string eval-str read))
                  (name (db-get-evaluation-specification eval-id))
                  (spec (db-get-specification name))
                  (checkouts (db-get-checkouts eval-id))
                  (instances (checkouts->channel-instances checkouts))
                  (build (specification-build spec))
                  (systems (specification-systems spec)))

             (par-for-each
              (lambda (system)
                (with-store store
                  (set-build-options store
                                       #:use-substitutes? #f
                                       #:substitute-urls '())
                  (inferior-evaluation store instances
                                       #:eval-id eval-id
                                       #:spec spec
                                       #:build build
                                       #:systems (list system))))
              systems)
             (display 'done)))))
    (x
     (format (current-error-port) "Wrong command: ~a~%." x)
     (exit 1))))
